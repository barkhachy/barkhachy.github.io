# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
plugins:
  -serverless-python-requirements

service: paysafe-roiim
provider:
  name: aws
  runtime: python2.7
  stage: testing
  region: us-east-2
  environment:
    EVENTS_TABLE_NAME: ${self:custom.eventsTableName}
    currency: "USD"
    locale: "en_US"
    environment : "TEST"
    m_dynamicDescriptor: "XYZ"
    m_phone: "1234567890"
    private_base64: "cHJpdmF0ZS03NzUxOkItcWEyLTAtNWYwMzFjZGQtMC0zMDJkMDIxNDQ5NmJlODQ3MzJhMDFmNjkwMjY4ZDNiOGViNzJlNWI4Y2NmOTRlMjIwMjE1MDA4NTkxMzExN2YyZTFhODUzMTUwNWVlOGNjZmM4ZTk4ZGYzY2YxNzQ4"
    public_base64 : "cHVibGljLTc3NTE6Qi1xYTItMC01ZjAzMWNiZS0wLTMwMmQwMjE1MDA4OTBlZjI2MjI5NjU2M2FjY2QxY2I0YWFiNzkwMzIzZDJmZDU3MGQzMDIxNDUxMGJjZGFjZGFhNGYwM2Y1OTQ3N2VlZjEzZjJhZjVhZDEzZTMwNDQ="
    paysafeCheckoutSDKSource: "https://hosted.paysafe.com/checkout/v2/paysafe.checkout.min.js"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynaomdb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.eventsTableArn}

custom:
  stage: ${self:provider.stage}
  eventsTableName: ${self:service}-${self:provider.stage}-events
  eventsTableArn:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - dynamodb
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - table/${self:custom.eventsTableName}


resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/api-gateway-errors.yml)}
  
package:
 individually: true

functions:
  get_token:
    handler: get_token.handler
    CodeUri: .
    events:
      - http:
          path: token 
          method: post
          cors: true
  save_card:
    handler: save_card.handler
    CodeUri: .
    events:
      - http:
          path: save_card 
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
